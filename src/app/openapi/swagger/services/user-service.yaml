paths:
  /users:
    get:
      tags:
        - User
      summary: List all users
      operationId: getAllUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../interfaces/user.yaml#/components/schemas/User'
              examples:
                example1:
                  value:
                    - user_id: 1
                      email: "user1@example.com"
                      username: "user1"
                    - user_id: 2
                      email: "user2@example.com"
                      username: "user2"
    post:
      tags:
        - User
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../interfaces/user.yaml#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '../interfaces/user.yaml#/components/schemas/User'
              examples:
                example1:
                  value:
                    user_id: 3
                    email: "newuser@example.com"
                    username: "newuser"

  /users/login:
    post:
      tags:
        - User
      summary: "Login user"
      description: "Log in with email and password, and return the user data if the credentials are valid."
      operationId: loginUser
      requestBody:
        description: "Email and password for login"
        required: true
        content:
          application/json:
            schema:
              $ref: "../interfaces/user.yaml#/components/schemas/LoginUserReq"
            example:
              email: "example@gmail.com"
              password: "password"
      responses:
        '200':
          description: "User data returned on successful login"
          content:
            application/json:
              schema:
                $ref: "../interfaces/user.yaml#/components/schemas/LoginUserResp"
              examples:
                example1:
                  value:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                    user:
                      user_id: 1
                      email: "exampleuser@teszt.hu"
                      username: "exampleuser"
                      password: "password"
                      family_id: 1
        '400':
          description: "Invalid email or password"
        '500':
          description: "Server error"

  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '../interfaces/user.yaml#/components/schemas/User'
              examples:
                example1:
                  value:
                    user_id: 1
                    email: "exampleuser@teszt.hu"
                    username: "exampleuser"
                    password: "password"
                    family_id: 1
    put:
      tags:
        - User
      summary: Update a user by ID
      operationId: updateUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../interfaces/user.yaml#/components/schemas/User'
            example:
              user_id: 3
              email: "newuser@example.com"
              username: "newuser"
              password: "password"
              family_id: 1
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '../interfaces/user.yaml#/components/schemas/User'
              example:
                user_id: 3
                email: "newuser@example.com"
                username: "newuser"
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
              examples:
                example1:
                  value:
                    message: "User deleted successfully"
  /users/{userId}/fridges:
    get:
      tags:
        - User
      summary: Get fridges owned by user or shared within user's family
      operationId: getUserFridges
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user requesting the fridges
      responses:
        '200':
          description: List of fridges accessible by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../interfaces/fridge.yaml#/components/schemas/Fridge'
              examples:
                example1:
                  value:
                    - fridge_id: 1
                      fridge_name: "Fridge Shared With Family"
                      owner_id: 2
                      shared_with_family: true
                    - fridge_id: 2
                      fridge_name: "Fridge Owned By User"
                      owner_id: 1
                      shared_with_family: false
        '404':
          description: User not found
